Macros
======

Mainloop:
	while (!Program1Queue.IsEmpty() && !Program2Queue.IsEmpty()) {
		Program1Queue.Peek().Execute()
		Program2Queue.Peek().Execute()
	}

Operation Prologue:
	PC = ProgramXQueue.Pop()

Operation Epilogue:
	PC += 1
	ProgramXQueue.Push_Back(PC)


Convention
==========

Commands are written like this:
	<Label> <OpCode>.<Modifier> <A-Mode><A-Value>, <B-Mode><B-Value>
	                            |--- A-Field ---| |--- B-Field ---|

Everything but the OpCode is optional.
For the possible modes see the MOV description


OpCodes
=======

DAT
---
	Description:
		Effectively kills the current process
	PseudoCode:
		DAT #A, #B:
			<Prologue>
			asm("NOP")


MOV
---
	Description:
		Moves A to B
	PseudoCode:
		MOV #A, B:
			<Prologue>
			mem[PC+B] = A
			<Epilogue>
		MOV A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A]
			<Epilogue>
		MOV $A, B:
			<Prologue>
			s.a.
			<Epilogue>
		MOV *A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A+mem[PC+A].AValue]
			<Epilogue>
		MOV @A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A+mem[PC+A].BValue]
			<Epilogue>
		MOV {A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A+(--mem[PC+A].AValue)]
			<Epilogue>
		MOV <A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A+(--mem[PC+A].BValue)]
			<Epilogue>
		MOV }A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A+(mem[PC+A].AValue--)]
			<Epilogue>
		MOV >A, B:
			<Prologue>
			mem[PC+B] = mem[PC+A+(mem[PC+A].BValue--)]
			<Epilogue>


ADD
---
	Description:
		Adds A and B value pointed to by A, and stores result in B
	Pseudocode:
		<Prologue>
		mem[PC+B] = mem[PC+A].AValue + mem[PC+A].BValue
		<Epilogue>


SUB and MUL
-----------
	Description:
		Analogous to ADD


DIV and MOD
-----------
	Description:
		Analogous to ADD. Division by zero effectively kills
		the process.


JMP
---
	Description:
		Jumps to another address.
	Pseudocode:
		<Prologue>
		ProgramXQueue.Push_Back(PC+A)


JMZ
---
	Description:
		Like JMP, but only if B value is zero.
	Pseudocode:
		<Prologue>
		if(mem[PC].BValue == 0)
			ProgramXQueue.Push_Back(PC+A)
		else
			<Epilogue>


JMN
---
	Description:
		Like JMP, but only if B value is not zero.
	Pseudocode:
		<Prologue>
		if(mem[PC].BValue != 0)
			ProgramXQueue.Push_Back(PC+A)
		else
			<Epilogue>


DJN
---
	Description:
		Decrements the value pointed to by B
0728 5.5.11 DJN
0729 DJN decrements the B-value and the B-target, then tests the B-value
0730 to determine if it is zero.  If the decremented B-value is not zero,
0731 the sum of the program counter and the A-pointer is queued.
0732 Otherwise, the next instruction is queued (PC + 1).  DJN.I functions
0733 as DJN.F would, i.e. it decrements both both A/B-numbers of the B-value
0734 and the B-target, and jumps if both A/B-numbers of the B-value are
0735 non-zero.
     
0736 5.5.12 CMP
0737 CMP compares the A-value to the B-value.  If the result of the
0738 comparison is equal, the instruction after the next instruction
0739 (PC + 2) is queued (skipping the next instruction).  Otherwise, the
0740 the next instruction is queued (PC + 1).
     
0741 5.5.13 SLT
0742 SLT compares the A-value to the B-value.  If the A-value is less than
0743 the B-value, the instruction after the next instruction (PC + 2) is
0744 queued (skipping the next instruction).  Otherwise, the next
0745 instruction is queued (PC + 1).  SLT.I functions as SLT.F would.
     
0746 5.5.14 SPL
0747 SPL queues the next instruction (PC + 1) and then queues the sum of
0748 the program counter and A-pointer. If the queue is full, only the
0749 next instruction is queued.

