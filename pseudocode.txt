Macros
======

Mainloop:
	while (!Program1Queue.IsEmpty() && !Program2Queue.IsEmpty()) {
		Program1Queue.Peek().Execute()
		Program2Queue.Peek().Execute()
	}

Operation Prologue:
	PC = ProgramXQueue.Pop()

Operation Epilogue:
	PC += 1
	ProgramXQueue.Push_Back(PC)


Convention
==========

Commands are written like this:
	<Label> <OpCode>.<Modifier> <A-Mode><A-Field> <B-Mode><B-Field>

Everything but the OpCode is optional.


OpCodes
=======

DAT
---
	Description:
		Effectively kills the current process
	PseudoCode:
		<Prologue>
		asm("NOP")


MOV
---
	Description:
		Moves 
0687 Move replaces the B-target with the A-value and queues the next
0688 instruction (PC + 1).
     
0689 5.5.3 ADD
0690 ADD replaces the B-target with the sum of the A-value and the B-value
0691 (A-value + B-value) and queues the next instruction (PC + 1).  ADD.I
0692 functions as ADD.F would.
     
0693 5.5.4 SUB
0694 SUB replaces the B-target with the difference of the B-value and the
0695 A-value (B-value - A-value) and queues the next instruction (PC + 1).
0696 SUB.I functions as SUB.F would.
     
0697 5.5.5 MUL
0698 MUL replaces the B-target with the product of the A-value and the
0699 B-value (A-value * B-value) and queues the next instruction (PC + 1).
0700 MUL.I functions as MUL.F would.
     
0701 5.5.6 DIV
0702 DIV replaces the B-target with the integral result of dividing the
0703 B-value by the A-value (B-value / A-value) and queues the next
0704 instruction (PC + 1).  DIV.I functions as DIV.F would. If the
0705 A-value is zero, the B-value is unchanged and the current task is
0706 removed from the warrior's task queue.
     
0707 5.5.7 MOD
0708 MOD replaces the B-target with the integral remainder of dividing the
0709 B-value by the A-value (B-value % A-value) and queues the next
0710 instruction (PC + 1).  MOD.I functions as MOD.F would. If the
0711 A-value is zero, the B-value is unchanged and the current task is
0712 removed from the warrior's task queue.
     
0713 5.5.8 JMP
0714 JMP queues the sum of the program counter and the A-pointer.
     
0715 5.5.9 JMZ
0716 JMZ tests the B-value to determine if it is zero.  If the B-value is
0717 zero, the sum of the program counter and the A-pointer is queued.
0718 Otherwise, the next instruction is queued (PC + 1).  JMZ.I functions
0719 as JMZ.F would, i.e. it jumps if both the A-number and the B-number
0720 of the B-instruction are zero.
     
0721 5.5.10 JMN
0722 JMN tests the B-value to determine if it is zero.  If the B-value is
0723 not zero, the sum of the program counter and the A-pointer is queued.
0724 Otherwise, the next instruction is queued (PC + 1).  JMN.I functions
0725 as JMN.F would, i.e. it jumps if both the A-number and the B-number
0726 of the B-instruction are non-zero. This is not the negation of the
0727 condition for JMZ.F.
     
0728 5.5.11 DJN
0729 DJN decrements the B-value and the B-target, then tests the B-value
0730 to determine if it is zero.  If the decremented B-value is not zero,
0731 the sum of the program counter and the A-pointer is queued.
0732 Otherwise, the next instruction is queued (PC + 1).  DJN.I functions
0733 as DJN.F would, i.e. it decrements both both A/B-numbers of the B-value
0734 and the B-target, and jumps if both A/B-numbers of the B-value are
0735 non-zero.
     
0736 5.5.12 CMP
0737 CMP compares the A-value to the B-value.  If the result of the
0738 comparison is equal, the instruction after the next instruction
0739 (PC + 2) is queued (skipping the next instruction).  Otherwise, the
0740 the next instruction is queued (PC + 1).
     
0741 5.5.13 SLT
0742 SLT compares the A-value to the B-value.  If the A-value is less than
0743 the B-value, the instruction after the next instruction (PC + 2) is
0744 queued (skipping the next instruction).  Otherwise, the next
0745 instruction is queued (PC + 1).  SLT.I functions as SLT.F would.
     
0746 5.5.14 SPL
0747 SPL queues the next instruction (PC + 1) and then queues the sum of
0748 the program counter and A-pointer. If the queue is full, only the
0749 next instruction is queued.

